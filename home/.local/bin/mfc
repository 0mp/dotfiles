#! /bin/sh -
#
# SPDX-License-Identifier: BSD-2-Clause-FreeBSD
#
# Copyright (c) 2020 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

usage() {
	cat <<USAGE >&2
Usage:	${0##*/} merge [-c] [-D differential_rev] branch rev ...
	${0##*/} --help

Options:

--help	Show usage.

Commands:

merge	Merge specified revisions with "svn merge", so the repository is ready
	for a commit.

	Supported options and arguments are:

	-c	Commit after merging specified revisions, reviewing the
		resulting patch and editing the commit message.  If the editor
		exits with a non-zero status when closing the commit message
		file, then the changes are not going to be committed.
	-D differential_rev
		Specify differential revision (e.g., 22228) for the MFC commit.
	branch
		Specify the branch to merge to (it has to be a valid
		directory).
	rev ...
		Specify revisions to merge.

Files:

/tmp/svn-commit.tmp	The temporary file storing the commit message.

Examples:

Here is an example of how to MFC revisions 336481, 336585, and 359126
into 12-STABLE:

	# Check out the branch you want to MFC to.
	svn co svn+ssh://\${USER}@repo.freebsd.org/base/stable/12 stable-12
	# Merge desired revisions, review the resulting patch,
	# and prepare the commit message. Subsequently, the changes are going
	# to be committed.
	mfc merge -c stable-12 336481 336585 359126
USAGE
}

generate_commit_message() {
	local _commit_message
	local _differential_revision
	local _rev
	local _revisions

	_commit_message="$1"
	_differential_revision="$2"
	shift 2

	{
		printf 'MFC %s' "$1"
		shift
		for _rev in "$@"; do
			printf ', %s' "$_rev"
		done
		set -- $_revisions
		printf ':\n'

		if [ "$_differential_revision" != none ]; then
			printf 'Differential Revision:\thttps://reviews.freebsd.org/%s\n' \
				"$_differential_revision"
		fi

		for _rev in "$@"; do
			printf '\n'
			svn log -c "$_rev" |
				sed '1d;2d;3d;$d' |
				sed -e '/MFC after:/d' -e '/X-MFC-With:/d'
		done
	} | tee "$_commit_message"

	if command -v xclip >/dev/null; then
		xclip -in "$_commit_message" -sel clip
	fi
}

# Merge specified revisions.
#
# SYNOPSIS
# merge_revisions branch rev ...
#
# CAVEATS
# The branch must be up to date.
merge_revisions() {
	local _rev
	local _branch

	_branch="$1"
	shift

	for _rev in "$@"; do
		svn merge -c "$_rev" ^/head "$_branch" || exit
	done
}

show_diff() {
	local _branch="$1"

	if command -v ydiff >/dev/null; then
		ydiff "$_branch"
	else
		svn diff "$_branch" | less
	fi
}

edit_commit_message() {
	local _commit_message="$1"

	# The editor is supposed to exit with a non-zero status if it would be
	# undesired to commit the changes.
	${VISUAL:-${EDITOR:-vi}} "$_commit_message"
}

command_marge() {
	local _commit_message="/tmp/svn-commit.tmp"
	local _should_attempt_to_commit="no"
	local _branch
	local _revisions
	local _differential_revision="none"

	OPTIND=1
	while getopts cD:M _o; do
		case $_o in
		D)
			_differential_revision="D${OPTARG#D}"
			;;
		c)
			_should_attempt_to_commit="yes"
			;;
		?)
			usage
			exit 1
			;;
		esac
	done
	if [ "$OPTIND" -ne 0 ]; then
		shift "$(( OPTIND - 1 ))"
	fi

	_branch="$1"
	shift
	if [ ! -d "$_branch" ]; then
		echo "Branch is not checked out locally" 1>&2
		exit 1
	fi
	_revisions="$*"
	set --
	for _rev in $_revisions; do
		set -- "$@" "${_rev#r}"
	done
	_revisions="$*"

	svn revert --recursive "$_branch" || exit
	svn up "$_branch" || exit
	merge_revisions "$_branch" "$@"

	generate_commit_message "$_commit_message" "$_differential_revision" "$@"
	show_diff "$_branch"
	if edit_commit_message "$_commit_message" &&
		[ "$_should_attempt_to_commit" = yes ]; then
		svn commit -F "$_commit_message" "$_branch"
	fi
}

main() {
	case $1 in
		--help | "")
			usage
			;;
		merge)
			shift
			command_marge "$@"
			;;
		*)
			usage
			exit 1
			;;
	esac
}

main "$@"
