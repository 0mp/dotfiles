#! /bin/sh -
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2018-2019 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     1. Redistributions of source code must retain the above copyright notice,
#        this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# ---
# Automate source-based FreeBSD updates.

# I've found out that the PORTS_MODULES mechanism does not work well if it is
# not cleaned before running `buildkernel`. The port does not get rebuiled
# resulting in an installation of a port too old for the newly built kernel.
clean_ports_modules() {
    for conf in /etc/src.conf /etc/make.conf
    do
        for module in $(sysrc -q -f "$conf" PORTS_MODULES)
        do
            cd "/usr/src/$module" && make clean
        done
    done
}

get_current_date() {
    date +%Y-%m-%d_%Hh%Mm%Ss || echo 'YYYY-MM-DD_hhhmmmsss'
}

die() {
    printf 'FATAL: %s\n' "$*" >&2
    exit 1
}

action=
logfile=
register_action() {
    action="$1"
    logfile="$logdir/$(get_current_date)-$action.log"
    touch -- "$logfile"
}

finish_action() {
    touch -- "$logdir/$(get_current_date)-$action.done"
}

run() {
    action="$1"
    shift
    if register_action "$action"
    then :; else
        return
    fi
    (
        (
            (
                (
                    { "$@" 2>&1 || die "Failed to finish \"$action\""; } 3>&- 4>&-
                    echo $? >&3
                ) | tee -a "$logfile" >&4
            ) 3>&1
        ) | (read -r xs; exit "$xs")
    ) 4>&1
    finish_action
}

version=3.0.0

if [ $# -eq 0 ]
then
    cat <<__end_of_usage
Usage: roteste [-kipsw]
Version: $version
__end_of_usage
elif [ 0 -ne "$(id -u)" ]
then
    die 'roteste has to be run as root'
fi

logdir="/var/log/roteste/$(get_current_date)_$(printf '%s' "$*" | tr ' ' '_')"
if [ -d "$logdir" ]
then
    die "\"$logdir\" should not exist"
elif mkdir -p -- "$logdir" && [ -d "$logdir" ]
then :; else
    die "Failed to create \"$logdir\""
fi

set -e

ncpu="$(sysctl -n hw.ncpu)"

set -- $(getopt kipsw $*)

while :; do
    case "$1" in
        -k)
            kernel=yes
            shift
            ;;
        -i)
            install=yes
            shift
            ;;
        -p)
            ports=yes
            shift
            ;;
        -s)
            src=yes
            shift
            ;;
        -w)
            world=yes
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

# Get the latest source tree.
if [ "$src" ]
then
    if ! [ -d /usr/src/.svn ]
    then
        run 'src-rm' rm -rf -- /usr/src/*
        run 'src-checkout' svnlite co https://svn.freebsd.org/base/head /usr/src
    else
        run 'src-update' svnlite update /usr/src
    fi
fi

if [ "$ports" ]
then
    if ! [ -d /usr/ports/.svn ]
    then
        run 'ports-rm' rm -rf -- /usr/ports/*
        run 'ports-checkout' svnlite co https://svn.freebsd.org/ports/head /usr/ports
    else
        run 'ports-update' svnlite update /usr/ports
    fi
fi

if [ "$world" ]
then
    cd /usr/src
    # XXX: Track filemon loading.
    kldstat -q -n filemon || kldload filemon
    run 'buildworld' make -j$ncpu buildworld
fi

if [ "$kernel" ]
then
    run 'clean-modules' clean_ports_modules

    cd /usr/src
    # XXX: Track filemon loading.
    kldstat -q -n filemon || kldload filemon
    run 'buildkernel' make -j$ncpu buildkernel
fi

if [ "$install" ]
then
    cd /usr/src
    run 'beinstall' ./tools/build/beinstall.sh -j"$ncpu"
fi
