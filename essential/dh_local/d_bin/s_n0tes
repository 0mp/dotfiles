#! /bin/sh -
#
# Copyright (c) 2021 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

#
# Functions
#

die() {
	_rc="$1"
	shift
	printf "%s\n" "$*" >&2
	exit "$_rc"
}

require() {
	if ! command -v "$1" >/dev/null; then
		die 1 "ERROR: Command not found: $1"
	fi
}

get_snippet_name() {
	awk '
		/^BEGIN/ {
			print $2
		}
	' "$0"
}

get_snippet_content() {
	_name="$1"
	awk -v name="$_name" '
		BEGIN {
			printing = 0;
			found = 0;
		}
		/^BEGIN/ && $2 == name {
			printing = 1;
			found = 1;
			next
		}
		/^END/ {
			printing = 0;
			next
		}
		printing {
			print
		}
		END {
			if (found) {
				exit 0
			} else {
				exit 1
			}
		}
	' "$0"
}

main() {
	require fzf

	_name="${1:-}"
	if [ "$_name" = "" ]; then
		_name=$(get_snippet_name | fzf --preview="$0 {}")
	elif ! LC_ALL=C expr "X$_name" : "X[[:alnum:]_]*$" >/dev/null; then
		die 1 "ERROR: Invalid snippet name: $_name"
	fi

	get_snippet_content "${_name}"
	if command -v xclip >/dev/null; then
		get_snippet_content "${_name}" | xclip -in -sel clipboard
	fi
}

#
# Body
#

set -eu

main "$@"
exit 0

#
# Snippets
#

BEGIN kubctl_configure_cluster_context
# Select a cluster (and its zone).
args=$(gcloud container clusters list | awk 'NR>1 {printf "%s --zone %s\n", $1, $2}' | head -n 1)
# Pick one of the clusters and create kubectl configuration for it.
gcloud container clusters get-credentials $args
END

BEGIN kubectl_get_pod_by_name
sh -eu -c "name=\$1; ns=\${2:-}; kubectl \${ns:+-n} \${ns:-} get pod -l app=\$name -o jsonpath='{.items[0].metadata.name}'" kubectl_get_pod_by_name NAME NAMESPACE
END

BEGIN ports_python_do_test
do-test:
	@(cd ${TEST_WRKSRC} && \
		${SETENV} ${TEST_ENV} ${PYTHON_CMD} ${PYDISTUTILS_SETUP} test)
END

BEGIN poudriere_testport
sudo poudriere testport -j 114a -o "${PWD#${PWD%/*/*}}"
END

BEGIN sh_die
die() {
	_rc="$1"
	shift
	printf "%s\n" "$*" >&2
	exit "$_rc"
}
END

BEGIN sh_getopts
OPTIND=1
while getopts ab: opt; do
	case "$opt" in
	a)
		echo "-a"
		;;
	b)
		echo "-b $OPTARG"
		;;
	?)
		exit 1
		;;
	esac
done
if [ "$OPTIND" -ne 0 ]; then
	shift "$(( OPTIND - 1 ))"
fi
END

BEGIN sh_modeline
# vim: filetype=sh softtabstop=4 shiftwidth=4 tabstop=4 expandtab
END

BEGIN sh_require
require() {
	if ! command -v "$1" >/dev/null; then
		printf "%s\n" "ERROR: Dependency not found: $1" >&2
		exit 1
	fi
}
END
