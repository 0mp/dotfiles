#! /bin/sh -
#
# Copyright (c) 2021-2022 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

#
# Functions
#

die() {
	_rc="$1"
	shift
	printf "%s\n" "$*" >&2
	exit "$_rc"
}

require() {
	if ! command -v "$1" >/dev/null; then
		die 1 "ERROR: Command not found: $1"
	fi
}

get_snippet_name() {
	awk '
		/^BEGIN/ {
			print $2
		}
	' "$0"
}

get_snippet_content() {
	_name="$1"
	awk -v name="$_name" '
		BEGIN {
			printing = 0;
			found = 0;
		}
		/^BEGIN/ && $2 == name {
			printing = 1;
			found = 1;
			next
		}
		/^END/ {
			printing = 0;
			next
		}
		printing {
			print
		}
		END {
			if (found) {
				exit 0
			} else {
				exit 1
			}
		}
	' "$0"
}

main() {
	require fzf

	_name="${1:-}"
	if [ "$_name" = "" ]; then
		_name=$(get_snippet_name | fzf --preview="$0 {}")
		# Reset cursor position.
		printf '\r'
	elif ! LC_ALL=C expr "X$_name" : "X[[:alnum:]_]*$" >/dev/null; then
		die 1 "ERROR: Invalid snippet name: $_name"
	fi

	get_snippet_content "${_name}"
	if command -v xclip >/dev/null; then
		get_snippet_content "${_name}" | xclip -in -sel clipboard
	fi
}

#
# Body
#

set -eu

main "$@"
exit 0

#
# Snippets
#

BEGIN ffmpeg_add_silent_audio_track
# Usage: $0 input output
ffmpeg_add_silent_audio_track() (
	set -eu

	input="$1"
	output="$2"
	ffmpeg -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 \
		-i "$input" -c:v copy -c:a aac -shortest "$output"
)
END

BEGIN ffmpeg_merge_mp4_videos
# Usage: $0 output input...
ffmpeg_merge_mp4_videos() {
	set -eux

	output="$1"
	shift
	inputs="$*"
	num_of_inputs="$#"
	input_args="$(printf -- '-i %s ' $inputs)"
	filter_complex_args="$(
		seq 0 "$(( num_of_inputs - 1 ))" | \
			xargs -n 1 -I @ printf '[%s:v] [%s:a] ' @ @
		echo "concat=n=${num_of_inputs}:v=1:a=1 [v] [a]"
	)"

	ffmpeg $input_args \
		-filter_complex "$filter_complex_args" \
		-map "[v]" -map "[a]" "$output"
}
END

BEGIN flamegraph_linux_perf
perf record -F 999 -g -q -- whoami >/dev/null
perf script > out.stacks
stackcollapse-perf.pl < out.stacks > out.folded
flamegraph.pl out.folded > flamegraph.svg
END

BEGIN freebsd_bectl_destroy_old_boot_environments
freebsd_bectl_destroy_old_boot_environments() {
	bectl list | awk 'NR > 1 && "NR" != $2 {print $1}' | xargs -n 1 sudo bectl destroy
}
END

BEGIN freebsd_format_usb
# Usage: $0 device [label]
freebsd_format_usb() (
	set -eux

	device="$1"
	label="${2-USB}"

	if ! expr "/$device" : "//.*" >/dev/null; then
		device="/dev/$device"
	fi

	sudo gpart destroy -F "$device" || :
	sudo gpart create -s MBR "$device"
	sudo gpart add -t fat32 "$device"
	sudo newfs_msdos -L "$label" -F 32 "${device}s1"
)
END

BEGIN freebsd_flash_iso
# Usage: $0 device [label]
freebsd_flash_iso() (
	set -eux

	device="$1"
	iso="${2}"

	sudo gpart destroy -F "$device" || :
	sudo gpart create -s MBR "$device"
	sudo gpart add -t fat32 "$device"
	sudo dd if="$iso" of="$device" bs=4m conv=sync
	sync
)
END

BEGIN freebsd_ports_git_show_revive
# Usage: $0 origin hash
freebsd_ports_git_show_revive() {
	local _hash _orign
	local -

	set -eux

	_origin="$1"
	_hash="$2"

	mkdir -p "$_origin"
	for _file in $(git ls-tree -r --name-only "$_hash:$_origin"); do
		if expr "X$_file" : "X.*/" >/dev/null 2>&1; then
			mkdir -p "$_origin/${_file%/*}"
		fi
		git show "$_hash:$_origin/$_file" > "$_origin/$_file"
	done
}
END

BEGIN freebsd_pkg_quarterly_to_latest
freebsd_pkg_quarterly_to_latest() {
	mkdir -p /usr/local/etc/pkg/repos
	sed s.quarterly.latest.g /etc/pkg/FreeBSD.conf > /usr/local/etc/pkg/repos/FreeBSD.conf
}
END

BEGIN git_config_pull_rebase
git config pull.rebase true
END

BEGIN git_fixup
# Usage: $0 hash [git-rebase-args ...]
git_fixup() {
	git commit --fixup "$1"
	shift 1
	git rebase -i origin/master --autosquash "$@"
}
END

BEGIN git_rewrite_commit_with_current_date
git rebase -i HEAD^
GIT_COMMITTER_DATE="$(date)" git commit --amend --no-edit --date "$(date)"
git rebase --continue
END

BEGIN git_shallow_clone
git clone --branch main --single-branch --depth 1 https://
END

BEGIN jail_create_dataset
# Usage: jail_create_dataset name
jail_create_dataset() {
	local _name
	local -

	set -eux
	_name="$1"
	sudo zfs create -p -o mountpoint="/jails/$_name/m" "zroot/jails/$_name/m"
}
END

BEGIN jail_extract
# Usage: $0 [-p path] [-v version] name
jail_extract() {
	local _name _path _reldir _version _distdir
	local -
	set -eux
	_reldir="releases"
	OPTIND=1
	while getopts p:v: opt; do
		case "$opt" in
			p) _path="$OPTARG" ;;
			v)
				_version="$OPTARG"
				case $_version in
				*-CURRENT|*-STABLE) _reldir="snapshots" ;;
				esac
				;;
			?) exit 1 ;;
		esac
	done
	if [ "$OPTIND" -ne 0 ]; then
		shift "$(( OPTIND - 1 ))"
	fi
	_name="$1"
	_path="${_path:-/jails/$_name/m}"
	_version="${_version:-$(uname -r)}"
	_distdir="/tmp/0mp-jail-${_name}-${_version}"

	mkdir -p "$_distdir"
	env \
		DISTRIBUTIONS="base.txz" \
                BSDINSTALL_DISTDIR="/tmp/0mp-jail-${_name}-${_version}" \
		BSDINSTALL_DISTSITE="https://download.freebsd.org/ftp/${_reldir}/amd64/amd64/${_version}" \
		bsdinstall distfetch
	sudo env \
		DISTRIBUTIONS="base.txz" \
                BSDINSTALL_DISTDIR="/tmp/0mp-jail-${_name}-${_version}" \
		BSDINSTALL_CHROOT="$_path" \
		bsdinstall distextract
}
END

BEGIN jail_install
# Usage: $0 [-p path] [-v version] name
jail_install() {
	local _name _path _version
	local -
	set -eux
	OPTIND=1
	while getopts p:v: opt; do
		case "$opt" in
			p) _path="$OPTARG" ;;
			v) _version="$OPTARG" ;;
			?) exit 1 ;;
		esac
	done
	if [ "$OPTIND" -ne 0 ]; then
		shift "$(( OPTIND - 1 ))"
	fi
	_name="$1"
	_path="${_path:-/jails/$_name/m}"
	_version="${_version:-$(uname -r)}"
	sudo env \
		BSDINSTALL_DISTDIR="/tmp/0mp-jail-${_name}-${_version}" \
		UNAME_r="$_version" \
		bsdinstall jail "$_path"
}
END

BEGIN jail_jail_conf
host.hostname="$name";
path="/jails/$name/m";
ip4=inherit;
mount.devfs;
mount.fstab="/jails/$name/fstab";

exec.clean;
exec.created+="logger jail $name has been created";
exec.start="sh /etc/rc";
exec.prestop+="logger shutting down jail $name";
exec.stop="sh /etc/rc.shutdown";
exec.poststop+="logger jail $name has shut down";

tj {
	# Set osrelease if software inside the jail complains about uname(1)
	# returning inconclusive information about the system version, e.g.:
	# UNAME_r (13.0-CURRENT) and OSVERSION (1202000) do not agree on major version number.
	#osrelease="12.2-RELEASE";
}
END

BEGIN kubectl_configure_cluster_context
# Select a cluster (and its zone).
args=$(gcloud container clusters list | awk 'NR>1 {printf "%s --zone %s\n", $1, $2}' | head -n 1)
# Pick one of the clusters and create kubectl configuration for it.
gcloud container clusters get-credentials $args
END

BEGIN kubectl_get_pod_by_name
sh -eu -c "name=\$1; ns=\${2:-}; kubectl \${ns:+-n} \${ns:-} get pod -l app=\$name -o jsonpath='{.items[0].metadata.name}'" kubectl_get_pod_by_name NAME NAMESPACE
END


BEGIN kubectl_get_public_ips_of_nodes
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(.type=="ExternalIP")].address}'
END

BEGIN kubectl_run_adhoc_pod
kubectl run adhocpod -i --tty --image ubuntu -- bash
END

BEGIN license_bsd_2_clause
SPDX-License-Identifier: BSD-2-Clause

Copyright (c) 2021 Mateusz Piotrowski <0mp@FreeBSD.org>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
END

BEGIN license_bsd_2_clause_sh
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2021 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
END

BEGIN ports_python_do_test
do-test:
	@(cd ${TEST_WRKSRC} && \
		${SETENV} ${TEST_ENV} ${PYTHON_CMD} ${PYDISTUTILS_SETUP} test)
END

BEGIN ports_update_go_mods
make gomod-vendor && make gomod-vendor | portedit merge -i Makefile && make makesum
END

BEGIN ports_update_rust_cargo_crates
make cargo-crates && make cargo-crates | portedit merge -i Makefile && make makesum
END

BEGIN poudriere_testport
sudo poudriere testport -j 114a -o "${PWD#${PWD%/*/*}}"
END

BEGIN sh_die
die() {
	_rc="$1"
	shift
	printf "%s\n" "$*" >&2
	exit "$_rc"
}
END

BEGIN sh_getopts
OPTIND=1
while getopts ab: opt; do
	case "$opt" in
	a)
		echo "-a"
		;;
	b)
		echo "-b $OPTARG"
		;;
	?)
		exit 1
		;;
	esac
done
if [ "$OPTIND" -ne 0 ]; then
	shift "$(( OPTIND - 1 ))"
fi
END

BEGIN sh_modeline
# vim: filetype=sh softtabstop=4 shiftwidth=4 tabstop=4 expandtab
END

BEGIN pdf_libreoffice_calc_spreadsheet_to_pdf
# Usage: $0 file [outdir]
pdf_libreoffice_calc_spreadsheet_to_pdf() {
	libreoffice --headless --convert-to pdf:calc_pdf_Export --outdir "${2:-.}" "$1"
}
END

BEGIN pdf_libreoffice_to_pdf
# Usage: $0 file [outdir]
pdf_libreoffice_to_pdf() {
	libreoffice --headless --convert-to pdf --outdir "${2:-.}" "$1"
}
END

BEGIN screen_shared_session_setup
# Set up a shared session:
#   screen -d -m -S shared
# List existing sessions:
#   screen -ls
# Attach to an existing session:
#   screen -x shared
END

BEGIN sh_require
require() {
	if ! command -v "$1" >/dev/null; then
		printf "%s\n" "ERROR: Dependency not found: $1" >&2
		exit 1
	fi
}
END

BEGIN ssh_remove_outdated_fingerprint_line_from_known_hosts
sh -c 'sed -i "" "$1d" ~/.ssh/known_hosts' -- roflfkh 0
END

BEGIN ssh_check_public_key_length
ssh_check_public_key_length() {
	ssh-keygen -l -f "${1:-~/.ssh/id_rsa.pub}"
}
END

BEGIN systemd_follow_service_logs
journalctl -u name.service
END

BEGIN zfs_checkpoint
sudo sh -c 'sudo zpool checkpoint -d $1; sudo zpool checkpoint $1' zfs-checkpoint zroot
END
