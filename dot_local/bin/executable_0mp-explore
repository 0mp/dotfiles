#! /bin/sh -
#
# 0mp-explore - View files of the whole code base tree in a pager.
#
# ---
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2017-2018,2021 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

program='0mp-explore'
version=3.1.0

bold='\033[1m'
invert='\033[7m'
resetescapecodes='\033[0m'

usage() {
    cat <<EOF
Usage: 0mp-explore [-Acn] [-0 | -i] [-r regex | -w regex] [[--] scope ...]
       0mp-explore [-h | --version]
EOF
}

# Parameters:
# $1 - The command which reads every file. Its output is then piped
#      into `cat -n`.
# Environmental variables:
# - command
# - bold
# - invert
# - resetescapecodes
# - leftbar
# - leftbarseparator
# - regex
explore() {
    # Pass the variables into the script and in the second here-doc add the
    # literal part of the script (no substitutions in the current shell).
    script="$(cat << EOF
command="$command"
bold="$bold"
invert="$invert"
resetescapecodes="$resetescapecodes"
leftbar="$leftbar"
leftbarseparator="$leftbarseparator"

EOF
    )
    $(cat << 'EOF'
for file
do
    # Skip binary files.
    grep --binary-file=without-match . "$file" 2>/dev/null 1>&2 || continue
    printf -- '%b%s%b\n' "$bold$invert" "$file" "$resetescapecodes"

    if [ "@$leftbar@" = @nothing@ ]
    then
        $command "$file"
    else
        $command "$file" | awk -v fn="$file" -v lbs="$leftbarseparator" '{
            pos = (NR + 1) % (length(fn) + 1)
            if (pos == 0)
                printf "%1s%5d  %s\n", lbs, NR, $0
            else
                printf "%1s%5d  %s\n", substr(fn, pos, 1), NR, $0
        }'
    fi
    echo ""
done
EOF
    )"

    find "${@:-.}" \( -type f -o -type l \) -name "${regex:-*}" \
        -exec sh -c "$script" sh {} \; 2>/dev/null | \
        less --chop-long-lines --hilite-search --ignore-case --no-init \
            --RAW-CONTROL-CHARS
}

# Environmental variables:
# - leftbar
# - leftbarseparator
parse_opt_ascii() {
    leftbarseparator=' '
    leftbar=
}

# Environmental variables:
# - command
parse_opt_colors() {
    for command in pygmentize pygmentize-2.7 pygmentize-3.6
    do
        if ! command -v "$command" 2>/dev/null 1>&2
        then
            command=
        else
            break
        fi
    done

    if [ -z "$command" ]
    then
        printf '%s: no syntax highlighters available\n' "$program" >&2
        exit 1
    fi

    command="$command -g --"
}

parse_opt_help() {
    usage
    exit 0
}

# Environmental variables:
# - leftbar
parse_opt_noleftbar() {
    leftbar=nothing
}

# Parameters:
# "$1" - Regex to be applied.
# Environmental variables:
# - regex
parse_opt_regex() {
    regex="$1"
}

# Environmental variables:
# - version
parse_opt_version() {
    printf '%s\n' "$version"
    exit 0
}

# Parameters:
# "$1" - Part of the regex to be applied.
# Environmental variables:
# - regex
parse_opt_wildcards() {
    regex="*$1*"
}

# Avoid filenames starting with a dash in find paths.
# https://stackoverflow.com/a/4286196/4694621
# "$1" - Argument to dotslashify.
dotslashify() {
    if [ "@${1%"${1#?}"}@" = '@-@' ]
    then
        printf '%s' "./$1"
    else
        printf '%s' "$1"
    fi
}

command='cat --'
leftbar=
leftbarseparator='â–ˆ'
regex=

state=''
for arg in $_0MP_EXPLORE_OPTS "$@"
do
    if [ -z "$state" ]
    then
        set --
        state=0
    fi

    case $state in
        1)
            state=0
            ;;
        --regex)
            parse_opt_regex "$arg"
            state=0
            ;;
        --wildcards)
            parse_opt_wildcards "$arg"
            state=0
            ;;
        skip)
            set -- "$@" "$(dotslashify "$arg")"
            ;;
        0)
            case $arg in
                -A|--ascii) parse_opt_ascii ;;
                -c|--colors) parse_opt_colors ;;
                -h|--help) parse_opt_help ;;
                -n|--noleftbar) parse_opt_noleftbar ;;
                -r|--regex) state=--regex ;;
                -w|--wildcards) state=--wildcards ;;
                -i|--stdin)
                    while read -r line
                    do
                        for path in $line
                        do
                            set -- "$@" "$(dotslashify "$path")"
                        done
                    done
                    ;;
                -0|--stdin0)
                    while IFS= read -r line
                    do
                        oldIFS="$IFS"
                        IFS='\0'
                        for path in $line
                        do
                            set -- "$@" "$(dotslashify "$path")"
                        done
                        IFS="$oldIFS"
                    done
                    ;;
                --version) parse_opt_version ;;
                --) state=skip ;;
                -*)
                    # String of short options glued together, e.g., '-Acw'.
                    opts="${arg#-}"

                    while [ @@ != "@$opts@" ]
                    do
                        opt="${opts%%"${opts#?}"}"
                        case $opt in
                            A) parse_opt_ascii ;;
                            c) parse_opt_colors ;;
                            h) parse_opt_help ;;
                            n) parse_opt_leftbar ;;
                            # --regex and --wildcards are mutually exclusive so
                            # we only remember the last state.
                            r) state=--regex ;;
                            w) state=--wildcards ;;
                            i)
                                while read -r stdin || [ -n "$stdin" ]
                                do
                                    set -- "$@" "$(dotslashify "$stdin")"
                                done
                                ;;
                            0)
                                while IFS= read -r line
                                do
                                    oldIFS="$IFS"
                                    IFS='\0'
                                    for path in $line
                                    do
                                        set -- "$@" "$(dotslashify "$path")"
                                    done
                                    IFS="$oldIFS"
                                done
                                ;;
                            *) ;;
                        esac
                        opts="${opts#"$opt"}"
                    done
                    ;;
                *)
                    set -- "$@" "$(dotslashify "$arg")"
                    ;;
            esac
            ;;
        *)
            printf '%s: %s\n' >&2 \
                "$program" \
                "invalid state reached during command line arguments parsing"
            ;;
    esac
done

# Make sure that we got all the arguments we need.
case $state in
    --regex|--wildcards)
        printf '%s: missing regex' "$program" >&2
        exit 1
        ;;
    *) ;;
esac

explore "$@"
