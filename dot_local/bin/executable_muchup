#! /bin/sh -
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2018-2021 Mateusz Piotrowski <0mp@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     1. Redistributions of source code must retain the above copyright notice,
#        this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

## Functions

as_user() {
    sudo --login --user "$SUDO_USER" -- "$@"
}

as_root() {
    sudo --login --user "root" -- "$@"
}

die() {
    printf 'FATAL: %s\n' "$*" >&2
    exit 1
}

usage() {
    cat << USAGE
Usage: sudo $progname [-hikpsw]

Version: $version

Options:
-h  Show usage message.
-j  Start a shell in a jail in the boot environment.
-i  Install the system with beinstall(8).
-k  Run buildkernel.
-p  Update the ports tree.
-s  Update the src tree.
-w  Run buildworld.

Environment:
SUDO_USER  Unprivlieged user who owns trees and runs build jobs.
USAGE
}

require() {
	if ! command -v "$1" >/dev/null; then
		die "Command not found: $1"
	fi
}

update_git() {
    local _base_dir="$1"
    local _dir="$2"
    local _url="$3"
    shift 3

    as_user mkdir -p -- "$_base_dir"

    if [ -d "$_dir" ]; then
        as_user git -C "$_dir" pull --autostash --rebase
    else
        as_user git clone "$@" "$_url" "$_dir"
    fi
}

update_src() {
    local _base_dir="$1"
    local _src_dir="$2"

    update_git "$_base_dir" "$_src_dir" https://git.freebsd.org/src.git \
        --config remote.freebsd.fetch='+refs/notes/*:refs/notes/*'
}

update_ports() {
    local _base_dir="$1"
    local _ports_dir="$2"

    update_git "$_base_dir" "$_ports_dir" https://github.com/freebsd/freebsd-ports
}

# Parse command-line arguments.
# Usage: parse_args args ...
# Arguments:
# args  Command-line arguments to parse for the flags.
# Output:
# A string of letters representing parsed flags.
parse_args() {
    # Parse command-line arguments.
    OPTIND=1
    while getopts hijkpsw _opt; do
        case "$_opt" in
            h) usage; exit 0 ;;
            i|j|k|p|s|w) printf %s "$_opt" ;;
            ?)
                die "Unknown option: $_opt"
                ;;
        esac
    done
    if [ "$OPTIND" -ne 0 ]; then
        shift "$(( OPTIND - 1 ))"
    fi
}

build_base_target() {
    local _src_dir="$1"
    local _ports_dir="$2"
    local _target="$3"

    as_user make -C "$_src_dir" -j "$(sysctl -n hw.ncpu)" PORTSDIR="$_ports_dir" "$_target"
}

run_beinstall() {
    local _src_dir="$1"
    local _ports_dir="$2"

    as_root sh -c "$(cat << BEINSTALL
cd "$_src_dir" && \
env NO_PKG_UPGRADE=YES ./tools/build/beinstall.sh -j "$(sysctl -n hw.ncpu)" PORTSDIR="$_ports_dir"
BEINSTALL
    )"
}

run_jail() {
    local _boot_env="$(bectl list | awk '$2 == "R" {print $1}')"

    if [ "$_boot_env" = "" ]; then
		die "No boot environment active on reboot"
    fi

    local _script="/tmp/muchup-jail.sh"
    cat <<'EOF' > "$_script"
#! /bin/sh -
set -eu
be_mp="$(bectl list | awk '$2 == "R" {print $3}')"
usr_src_mp="$be_mp/usr/src"
logger $1
case $1 in
mount)
    mount_nullfs -o ro /usr/src "$usr_src_mp"
    ;;
umount)
    umount -f "$usr_src_mp"
    ;;
esac
EOF
    chmod +x "$_script"

    # XXX: The reason why we use exec.poststart here instead of exec.*stop to
    # clean up mounted filesystems is that bectl does not handle jails as we
    # would expect it to. In fact, (1) we get a shell during exec.start, (2) we
    # never actually run any of the exec.*stop commands.
    bectl jail \
        -o allow.chflags=1 \
        -o host=inherit \
        -o ip4=inherit \
        -o ip6=inherit \
        -o mount.devfs=1 \
        -o exec.prestart="$_script mount" \
        -o exec.poststart="$_script umount" \
        "$_boot_env"
}

main() {
    local _flags
    local _user
    local _base_dir
    local _src_dir

    # Make sure that all the necessary programs are available.
    require git
    require sudo

    # Print usage and quit if no arguments were provided.
    if [ $# = 0 ]; then
        usage
        exit 0
    fi

    # Try to extract the unprivliged username from SUDO_USER.
    _user="$SUDO_USER"
    # The directory to store source trees.
    _base_dir="/usr/home/$_user/.local/share/freebsd"
    # The directory to store the FreeBSD src tree.
    _src_dir="$_base_dir/src"
    # The directory to store the FreeBSD ports tree.
    _ports_dir="$_base_dir/ports"

    # Parse the command-line arguments.
    _flags="$(parse_args "$@")"

    # Require that variable "_user" is not empty.
    if [ -z "$_user" ]; then
        die "User not set"
    fi

    # Make sure that the value of user makes sense.
    if [ "$_user" = "root" ]; then
        die "User must not be set to root"
    fi
    if ! id "$_user" >/dev/null 2>&1; then
        die "User does not exist: $_user"
    fi

    # Run the actual commands to update the system.
    case $_flags in
        *k*|*w*) as_root kldload -n filemon ;;
    esac
    case $_flags in
        *s*) update_src "$_base_dir" "$_src_dir" ;;
    esac
    case $_flags in
        *p*) update_ports "$_base_dir" "$_ports_dir" ;;
    esac
    case $_flags in
        *w*) build_base_target "$_src_dir" "$_ports_dir" buildworld;;
    esac
    case $_flags in
        *k*) build_base_target "$_src_dir" "$_ports_dir" buildkernel;;
    esac
    case $_flags in
        *i*) run_beinstall "$_src_dir" "$_ports_dir";;
    esac
    case $_flags in
        *j*) run_jail;;
    esac
}

## Globals & constants

progname="${0##*/}"
version="4.1.2"

## Body

set -eu

main "$@"

exit 0

# vim: filetype=sh softtabstop=4 shiftwidth=4 tabstop=4 expandtab
