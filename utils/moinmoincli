#! /bin/sh -
#
# moinmoincli - Edit existing Moin Moin Wiki pages from a command line.
#
#               This script has been tested only on the FreeBSD wiki
#               (https://wiki.freebsd.org).
#
# Usage: Consult `moinmoincli --help` or the implementation.
#
# Sample configuration file (~/.moinmoincli.conf):
# name=MateuszPiotrowski
# password=xxx
# target='/WikiSandBox'
# textfile=/tmp/wiki.moin
# select_target() {
#     case "$1" in
#         [pP]*)
#             target='/MateuszPiotrowski/Audit/AudispAuditdistd'
#             textfile="$HOME/notes/plugin.moin"
#             ;;
#         [aA]*)
#             target='/MateuszPiotrowski/Audit/Auditdistd'
#             textfile="$HOME/notes/auditdistd.moin"
#             ;;
#         *)
#             errxit "invalid selector '$1'"
#             ;;
#     esac
# }
#
# ---
#
# Copyright (c) 2017 Mateusz Piotrowski <0mp@FreeBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

program=moinmoincli
version=4.0.0

base='https://wiki.freebsd.org'
conffile="$HOME/.moinmoincli.conf"
workdir='/tmp/moinmoincli-workdir'
editfile="$workdir/edit.html"
oldrawfile="$workdir/oldraw.txt"
cookiefile="$workdir/cookie.txt"

usage() {
    cat <<-EOF
Usage: $program [-hquv] [-f TEXTFILE] [-n NAME] [-t TARGET] SELECTOR
EOF
}

# $1 -- field number
# $2 -- field separator
# $3 -- regex
# $editfile -- parsed file
take() {
    grep -E -o "$3" "$editfile" | cut -d "$2" -f "$1"
}

# $1 -- text to be add to $data (& between fields is added automatically)
# $data
add_data() {
    if [ -z "$data" ]
    then
        data="$1"
    else
        data="$data&$1"
    fi
}

# $oldrawfile
show_diff() {
    if git diff --exit-code --color=always -- "$oldrawfile" "$textfile"
    then
        echo no changes
        exit 1
    else
        echo
    fi
}

# $comment
get_comment() {
    printf 'Comment: '
    read comment
}

# Inspiration: https://stackoverflow.com/a/7506695/4694621
# $1 -- data to be encoded
encode() {
    printf '%s' "$1" | hexdump -v -e '/1 "%02x"' | sed 's/\(..\)/%\1/g'
}

clean_up() {
    if [ -n "$workdir" ] && [ -d "$workdir" ]
    then
        rm -rf "$workdir"
    fi
    stty echo
}

print_summary() {
    cat <<-EOF
Summary
=======
Username:  $name
Target:    $target
Comment:   $comment
Text file: $textfile
EOF
}

errxit() {
	printf "error: %s\n" "$*"
	exit 1
}

# This should be overwritten in the configuration file.
select_target() {
    printf '%s' "$target"
}

download_rawpage() {
    rawpage="$base/$target?action=raw"
    if ! curl "$rawpage" 1>"$oldrawfile" 2>/dev/null
    then
        errxit "failed to download old revision"
    fi
    mv "$oldrawfile" "$oldrawfile".tmp
    awk 1 RS='\r\n' ORS='\n' "$oldrawfile".tmp 1>"$oldrawfile" 2>/dev/null
}

mkdir -p "$workdir"
trap 'clean_up' EXIT

. "$conffile"

while [ $# -gt 0 ]
do
    case "$1" in
        -n|--name)
            [ $# -eq 0 ] && errxit "missing value for the '$1' flag"
            name="$2"
            shift 2
            ;;
        -f|--file)
            [ $# -eq 0 ] && errxit "missing value for the '$1' flag"
            textfile="$2"
            shift 2
            ;;
        -q|--quick)
            quickmode=yes
            shift 1
            ;;
        -t|--target)
            [ $# -eq 0 ] && errxit "missing value for the '$1' flag"
            target="$2"
            shift 2
            ;;
        -h|--help)
            shift
            usage
            exit 0
            ;;
        -u|--update)
            shift
            updatemode=yes
            ;;
        -v|--version)
            shift
            printf '%s\n' "$version"
            exit 0
            ;;
        *)
            select_target "$1"
            shift
            ;;
    esac
done

[ -z "$name" ] && errxit 'missing name'
if [ -z "$password" ]
then
    printf 'Password: '
    stty -echo
    read password
    stty echo
fi
[ -z "$target" ] && errxit 'missing target'
[ -z "$textfile" ] && errxit 'missing text file'

if [ "@$updatemode@" = '@yes@' ]
then
    download_rawpage
    cat "$oldrawfile" > "$textfile"
    echo updated.
    exit 0
fi

textarea="$(cat -- "$textfile")"

download_rawpage

show_diff
get_comment
print_summary
cat <<-EOF
Actions:
 * confirm        -> y,k
 * abort          -> n,a
 * mark trivial   -> t
 * change comment -> c
 * show diff      -> d
 * print summary  -> s
EOF
while true
do
    [ "@${quickmode:-no}@" = "@yes@" ] && break
    printf '[yknatcds] '
    read action
    case "$action" in
        y|k)
            break
            ;;
        n|a)
            exit 1
            ;;
        t)
            trivial=yes
            echo 'marked as trivial'
            ;;
        c)
            get_comment
            ;;
        d)
            show_diff
            ;;
        *)
            echo 'invalid action (%s)\n' "$action"
    esac
done

echo processing...

data=
add_data "action=login"
add_data "login=Login"
add_data "name=$name"
add_data "password=$password"

loginpage="$base/action/login/FrontPage"
if ! curl --data "$data" --cookie-jar "$cookiefile" "$loginpage" 1>/dev/null 2>&1
then
    errxit "failed to log in"
fi
editpage="$base/action/edit$target?action=edit&editor=text"
if ! curl --cookie "$cookiefile" "$editpage" 1>"$editfile" 2>/dev/null
then
    errxit "failed to get the edit page"
fi

data=
add_data "action=edit"
add_data "rev=$(take 6 '"' '<input type="hidden" name="rev" value="[0-9]+">')"
add_data "ticket=$(take 6 '"' '<input type="hidden" name="ticket" value=".*">')"
add_data "button_save=Save Changes"
add_data "editor=text"
add_data "comment=$(encode "$comment")"
add_data "savetext=$(encode "$textarea")"
[ "@$trivial@" = "@yes@" ] && add_data "trivial=1"

if ! curl --data "$data" --cookie "$cookiefile" "$base$target#preview" 1>/dev/null 2>&1
then
    errxit "failed to update the page"
fi

echo done.
