#! /bin/sh -
#
# 0mp-explore - View files of the whole code base tree in a pager.
#

program='0mp-explore'
version=0.11.0

bold='\033[1m'
nobold='\033[0m'

shortusage() {
    proglen="$(printf '%s' "$program" | sed 's/./ /g')"

    cat <<EOF
Usage: $program [--ascii] [--colors] [--names] [--nonumbers] [--regex REGEX]
       $proglen [--wildcards REGEX] [-] [--help] [--version] [--] [SCOPE...]
EOF
}

usage() {
    cat <<EOF
Usage: $program [OPTION...] [SCOPE...]

Positional arguments:
    SCOPE
        Files and directories to be explored by the program. If not provided
        then the scope is set to '.' (the current directory).

Environmental variables:
    _0MP_EXPLORE_OPTS
        Options to be passed to the program when it starts. They are processed
        before the options passed via the command line.

Options:
    -A, --ascii
        Replace the default character separating file names on the left side
        bar. Implies the --names option.

    -c, --colors
        Add syntax coloring with pygmentize which has to be installed. This
        option might slow down the program significantly.

    -n, --names
        Print currently viewed file name on the left side bar, next to the line
        numbers.

    -N, --nonumbers
        Don't print line numbers and file names on the left side bar.

    -r, --regex REGEX
        Set the regex string used to match files to be read; for example
        providing '.*.c' as a regex results in printing only C source files.

    -w, --wildcards REGEX
        Just like --regex but with a leading and a tailing wildcard .*. For
        example, "-r '*vector*'" and "-w vector" are effectively the same.

    -
        Read scope files and directories from the standard input.

    --
        End of options. Treat the rest of the command line arguments as files
        and directories for program's scope.

    -h, --help
        Show help.

    --version
        Show version.

Examples:
    $program -r '.*.c$' /usr/src
        View only C source files in the /usr/src directory.

    $program .bashrc Downloads/*.h
        View the .bashrc file and header files inside the Downloads directory.

EOF
}

# Parameters:
# $1 - The command which reads every file. Its output is then piped
#      into `cat -n`.
# Environmental variables:
# - names
# - regex
# - scope
explore() {
    command="$1"

    find ${scope:-'.'} -type f -name "${regex:-*}" -exec sh -c "
        for file
        do
            # Skip binary files.
            grep --binary-file=without-match . \"\$file\" 2>/dev/null 1>&2 || \
                continue
            printf -- '%b%s%b\n' \"$bold\" \"\$file\" \"$nobold\"

            if [ x\"$leftbar\" = xnames ]
            then
                $command \"\$file\" | \
                awk -v fn=\"\$file\" '{
                    if (NR % (length(fn) + 1) == 0) {
                        printf \"$leftbarseparator%5d  %s\n\", NR, \$0
                    }
                    else {
                        printf \"%1s%5d  %s\n\", substr(fn,
                            NR % (length(fn) + 1), 1), NR, \$0
                    }
                }'
            elif [ x\"$leftbar\" = xnothing ]
            then
                $command \"\$file\"
            else
                $command \"\$file\" | \
                awk '{ printf \"%6d  %s\n\", NR, \$0 }'
            fi
            echo
        done
    " sh {} + | less --no-init --chop-long-lines --RAW-CONTROL-CHARS \
        --ignore-case
}

# Parameters
# $@ - Arguments to be parsed.
# Environmental variables:
# - colors
# - leftbar
# - leftbarseparator
# - regex
# - scope
parse() {
    while test $# -gt 0
    do
        case $1 in
            --ascii|-A)
                shift
                leftbarseparator='|'
                leftbar=names
                ;;

            --colors|-c)
                shift
                colors=yes
                if ! command -v pygmentize 1>&2 2>/dev/null
                then
                    printf '%s: pygmentize is not available\n' "$program"
                    exit 1
                fi
                ;;

            -h)
                shift
                shortusage
                exit 0
                ;;

            --help)
                shift
                usage
                exit 0
                ;;

            --names|-n)
                leftbar=names
                shift
                ;;

            --nonumbers|-N)
                leftbar=nothing
                shift
                ;;

            --regex|-r)
                shift
                regex="$1"
                shift
                ;;

            --version)
                shift
                printf '%s\n' "$version"
                exit 0
                ;;

            --wildcards|-w)
                shift
                regex="*$1*"
                shift
                ;;

            -)
                shift
                while IFS= read stdinscope || [ -n "$stdinscope" ]
                do
                    scope="${scope:-""} $stdinscope"
                done
                ;;

            --)
                shift
                if [ $# -gt 0 ]
                then
                    scope="${scope:-""} $@"
                fi
                break
                ;;

            *)
                scope="${scope:-""} $1"
                shift
                ;;
        esac
    done
}

colors=
leftbar=
leftbarseparator='â–ˆ'
regex=
scope=

parse $_0MP_EXPLORE_OPTS
parse "$@"

scope="${scope# }"

if test "x$colors" = "xyes"
then
    explore 'pygmentize -g --'
else
    explore 'cat --'
fi
