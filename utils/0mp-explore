#! /bin/sh -
#
# 0mp-explore - View files of the whole code base tree in a pager.
#

PROGRAM='0mp-explore'
VERSION=0.5.8

BOLD='\033[1m'
NOBOLD='\033[0m'

usage() {
    cat <<EOF
Usage: $PROGRAM [OPTION...] [SCOPE...]

Positional arguments:
    SCOPE
        Files and directories to be explored by the program. If not provided
        then the scope is set to '.' (the current directory).

Options:
    -c, --colors
        Add syntax coloring with pygmentize which has to be installed. This
        option might slow down the program significantly.

    -r, --regex REGEX
        Regex string used to match files to be read; for example providing
        '.*.c' as a regex results in printing only C source files.

    --
        End of options. Treat the rest of the command line arguments as files
        and directories for program's scope.

    -h, --help
        Show help.

    --version
        Show version.

Examples:
    $PROGRAM -r '.*.c$' /usr/src
        View only C source files in the /usr/src directory.

    $PROGRAM .bashrc Downloads/*.h
        View the .bashrc file and header files inside the Downloads directory.

EOF
}

# Parameters
# $1 - The command which reads every file. Its output is then piped
#      into `cat -n`.
# Environmental variables:
# - regex
# - scope
explore() {
    command="$1"

    # --dereference-recursive --files-with-matches --binary-files=without-match
    grep -RlI '.' ${scope:-'.'} |
        grep "${regex:-"."}" |
        xargs -I {} sh -c "printf -- '%b%s%b\n' \"$BOLD\" "{}" \"$NOBOLD\"; \
            $command "{}" | awk '{printf \"%6d  %s\n\", NR, \$0}'; echo" |
        less --no-init --chop-long-lines --RAW-CONTROL-CHARS

}

version() {
    cat <<EOF
$VERSION
EOF
}

usage_and_exit() {
    usage
    exit $1
}

scope=
regex=
colors=

while test $# -gt 0
do
    case $1 in
        --colors|-c)
            shift
            colors=yes
            if ! command -v pygmentize 1>&2 2>/dev/null
            then
                printf '%s: pygmentize is not available\n' "$PROGRAM"
                exit 1
            fi
            ;;

        --help|-h)
            shift
            usage_and_exit
            ;;

        --regex|-r)
            shift
            regex="$1"
            shift
            ;;

        --version)
            shift
            version
            exit 0
            ;;

        --)
            shift
            if [ $# -gt 0 ]
            then
                scope="${scope:-""} $@"
            fi
            break
            ;;

        *)
            scope="${scope:-""} $1"
            shift
            ;;
    esac
done

scope="${scope# }"

if test "x$colors" = "xyes"
then
    explore 'pygmentize -g --'
else
    explore 'cat --'
fi
